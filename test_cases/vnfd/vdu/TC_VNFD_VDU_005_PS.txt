TC.9	VNFD:VDU security Unit validation

Sequence:
1.	Verify platform security parameters which can include the availability of features such as:
    •	The ability to generate true random numbers
    •	The availability of a Measure Launch Environment (MLE)
vnfd:vdu:platform_security_parameter

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	VNFD File Link  vnfdFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "test_case_9.txt")

def test_case_9():

    logger.write_info("Starting test case 9")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1.	Verify platform security parameters
    logger.write_info("Verifying vnfd:vdu:platform_security_parameter")

    tcResult.overallStatus = SUCCESS

    if VNFD.VDU.platform_security_parameter <> tcInput.vnfd:vdu:platform_security_parameter :
        tcResult.overallStatus = status
        logger.write_error("Test case 9 - Execution completed with errors - Unable to validate platform security parameter")
        //DONE [KS] Log the difference or missing parameter or print both
        logger.write_error("vnfd:vdu:platform_security_parameter - Actual value is %s, expected %s" % (VNFD.VDU.platform_security_parameter, tcInput.vnfd.vdu.platform_security_parameter))       
        logger.close_handlers()
        return ERROR

    logger.write_info("Test case 9 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus