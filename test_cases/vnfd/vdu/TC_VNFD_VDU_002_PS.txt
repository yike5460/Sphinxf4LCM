TC.6	VNFD:VDU VNFC Elements validation

Sequence:
1.	Verify VNFC unique identifier within the namespace of a specific VNF
vnfd:vdu:vnfc:id
2.	Verify VNFC Connection Point ID
vnfd:vdu:vnfc:connection_point:id
3.	Verify VNFC Connection Point type
vnfd:vdu:vnfc:connection_point:type
4.	Verify VNFC Connection Point Virtual Link reference
vnfd:vdu:vnfc:connection_point:virtual_link_reference

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	VNFD File Link  vnfdFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "test_case_6.txt")

def test_case_6():

    logger.write_info("Starting test case 6")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1.	Verify VNFC unique identifier within the namespace of a specific VNF
    logger.write_info("Verifying vnfd:vdu:vnfc:id")

    tcResult.overallStatus = SUCCESS

    if VNFD.VDU.vnfc.id <> tcInput.vnfd.vdu.vnfc.id :
        tcResult.overallStatus = status
        logger.write_error("Test case 6 - Execution completed with errors - Unable to validate VNFC's ID")
        //DONE [KS] Log the two IDs for later error reserach and apply it to the below conditions too 
        logger.write_error("vnfd:vdu:vnfc:id - Actual value is %s, expected %s" % (VNFD.VDU.vnfc.id, tcInput.vnfd.vdu.vnfc.id))
        logger.close_handlers()
        return ERROR

    2.	Verify VNFC Connection Point ID
    logger.write_info("Verifying vnfd:vdu:vnfc:connection_point:id")

    if VNFD.VDU.vnfc:connection_point:id <> tcInput.vnfd.vdu.vnfc:connection_point:id :
        tcResult.overallStatus = status
        logger.write_error("Test case 6 - Execution completed with errors - Unable to validate Connection Point ID")
        logger.write_error("vnfd:vdu:connection_point:id - Actual value is %s, expected %s" % (VNFD.VDU.connection_point.id, tcInput.vnfd.vdu.connection_point.id))        
        logger.close_handlers()
        return ERROR

    3.	Verify VNFC Connection Point type
    logger.write_info("Verifying vnfd:vdu:vnfc:connection_point:type")

    if VNFD.VDU.vnfc:connection_point:type <> tcInput.vnfd.vdu.vnfc:connection_point:type :
        tcResult.overallStatus = status
        logger.write_error("Test case 6 - Execution completed with errors - Unable to validate Connection Point type")
        logger.write_error("vnfd:vdu:vnfc:connection_point:type - Actual value is %s, expected %s" % (VNFD.VDU.vnfc.connection_point:type, tcInput.vnfd.vdu.vnfc.connection_point:type))        
        logger.close_handlers()
        return ERROR

    4.	Verify VNFC Connection Point Virtual Link reference
    logger.write_info("Verifying vnfd:vdu:vnfc:connection_point:virtual_link_reference")

    if VNFD.VDU.vnfc:connection_point:virtual_link_reference <> tcInput.vnfd.vdu.vnfc:connection_point:virtual_link_reference :
        tcResult.overallStatus = status
        logger.write_error("Test case 6 - Execution completed with errors - Unable to validate Connection Point virtual_link_reference parameter")
        logger.write_error("vnfd:vdu:vnfc:connection_point:virtual_link_reference - Actual value is %s, expected %s" % (VNFD.VDU.vnfc.connection_point:virtual_link_reference, tcInput.vnfd.vdu.vnfc.connection_point:virtual_link_reference))             
        logger.close_handlers()
        return ERROR

    logger.write_info("Test case 6 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus