TC.8	VNFD:VDU Memory Unit validation

Sequence:
1.	Verify memory related parameters like
Memory Type, Memory Speed, Number of memory channels, Size of available memory, Reliability characteristics, Memory oversubscription policy, Memory bandwidth required per VDU, Number of large pages required per VDU, Non-Uniform Memory Architecture (NUMA) Allocation Policy
vnfd:vdu:memory_parameter
2.	Verify Hot add memory support
vnfd:vdu:memory_hot_add

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	VNFD File Link  vnfdFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "test_case_8.txt")

def test_case_8():

    logger.write_info("Starting test case 8")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1.	Verify memory related parameters
    logger.write_info("Verifying vnfd:vdu:memory_parameter")

    tcResult.overallStatus = SUCCESS

    if VNFD.VDU.memory_parameter <> tcInput.vnfd.vdu.memory_parameter :
        tcResult.overallStatus = status
        logger.write_error("Test case 8 - Execution completed with errors - Unable to validate Memory parameters")
        [KS] log the difference or both values
        logger.close_handlers()
        return ERROR

    2.	Verify Hot add memory support
    logger.write_info("Verifying vnfd:vdu:memory_hot_add")

[KS] will this validation work if the parameter is optional?
    if VNFD.VDU.memory_hot_add <> tcInput.vnfd.vdu.memory_hot_add :
        tcResult.overallStatus = status
        logger.write_error("Test case 8 - Execution completed with errors - Unable to validate Hot add memory")
        logger.close_handlers()
        return ERROR

    logger.write_info("Test case 8 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus