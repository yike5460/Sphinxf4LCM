TC_VNFD_VDU_004	VNFD:VDU Memory Unit validation

Sequence:
1.	Verify memory related parameters like
Memory Type, Memory Speed, Number of memory channels, Size of available memory, Reliability characteristics, Memory oversubscription policy, Memory bandwidth required per VDU, Number of large pages required per VDU, Non-Uniform Memory Architecture (NUMA) Allocation Policy
This is an optional attribute.
vnfd:vdu:memory_parameter
2.	Verify Hot add memory support (optional)
vnfd:vdu:memory_hot_add

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	VNFD File Link  vnfdFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "TC_VNFD_VDU_004.txt")

def TC_VNFD_VDU_004():

    logger.write_info("Starting test TC_VNFD_VDU_004")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1.	Verify memory related parameters
    logger.write_info("Verifying vnfd:vdu:memory_parameter")

    tcResult.overallStatus = SUCCESS

    try : tcInput.vnfd.vdu.memory_parameter
    except NameError:
        tcInput.vnfd.vdu.memory_parameter = None
        if VNFD.VDU.memory_parameter is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VDU_004 - Execution completed with errors - VNFD file is containing memory_parameter attribut")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.memory_parameter <> tcInput.vnfd.vdu.memory_parameter) and (tcInput.vnfd.vdu.memory_parameter is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VDU_004 - Execution completed with errors - Unable to validate cpu_instruction_set_extension parameter")
        logger.write_error("vnfd:vdu:memory_parameter - Actual value is %s, expected %s" % (VNFD.VDU.memory_parameter, tcInput.vnfd.vdu.memory_parameter))
        logger.close_handlers()
        return ERROR

    2.	Verify Hot add memory support
    logger.write_info("Verifying vnfd:vdu:memory_hot_add")

    try : tcInput.vnfd.vdu.memory_hot_add
    except NameError:
        tcInput.vnfd.vdu.memory_hot_add = None
        if VNFD.VDU.memory_hot_add is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VDU_004 - Execution completed with errors - VNFD file is containing memory_hot_add attribut")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.memory_hot_add <> tcInput.vnfd.vdu.memory_hot_add) and (tcInput.vnfd.vdu.memory_hot_add is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VDU_004 - Execution completed with errors - Unable to validate memory_hot_add parameter")
        logger.write_error("vnfd:vdu:memory_hot_add - Actual value is %s, expected %s" % (VNFD.VDU.memory_hot_add, tcInput.vnfd.vdu.memory_hot_add))
        logger.close_handlers()
        return ERROR

    logger.write_info("TC_VNFD_VDU_004 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus