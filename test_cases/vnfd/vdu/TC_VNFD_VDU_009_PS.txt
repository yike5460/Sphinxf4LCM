TC_VNFD_VDU_009	VNFD:VDU General Reliability and Availability Unit validation

Sequence:
1.	Verify tracking system status for CORRECTABLE errors (optional)
    vnfd:vdu:corrected_error_notification
2.	Verify tracking system status for UNCORRECTABLE errors (optional)
    vnfd:vdu:uncorrected_error_notification

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	VNFD File Link  vnfdFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "TC_VNFD_VDU_009.txt")

def TC_VNFD_VDU_009():

    logger.write_info("Starting TC_VNFD_VDU_009")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1.	Verify tracking system status for CORRECTABLE errors
    logger.write_info("Verifying vnfd:vdu:corrected_error_notification")

    tcResult.overallStatus = SUCCESS

    try : tcInput.vnfd.vdu.corrected_error_notification
    except NameError:
        tcInput.vnfd.vdu.corrected_error_notification = None
        if VNFD.VDU.corrected_error_notification is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VDU_009 - Execution completed with errors - VNFD file is containing corrected_error_notification attribute")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.corrected_error_notification <> tcInput.vnfd.vdu.corrected_error_notification) and (tcInput.vnfd.vdu.corrected_error_notification is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VDU_009 - Execution completed with errors - Unable to validate corrected_error_notification parameter")
        logger.write_error("vnfd:vdu:corrected_error_notification - Actual value is %s, expected %s" % (VNFD.VDU.corrected_error_notification, tcInput.vnfd.vdu.corrected_error_notification))
        logger.close_handlers()
        return ERROR

    2.	Verify tracking system status for UNCORRECTABLE errors
    logger.write_info("Verifying vnfd:vdu:uncorrected_error_notification")

    try : tcInput.vnfd.vdu.uncorrected_error_notification
    except NameError:
        tcInput.vnfd.vdu.uncorrected_error_notification = None
        if VNFD.VDU.corrected_error_notification is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VDU_009 - Execution completed with errors - VNFD file is containing uncorrected_error_notification attribute")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.uncorrected_error_notification <> tcInput.vnfd.vdu.uncorrected_error_notification) and (tcInput.vnfd.vdu.uncorrected_error_notification is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VDU_009 - Execution completed with errors - Unable to validate uncorrected_error_notification parameter")
        logger.write_error("vnfd:vdu:uncorrected_error_notification - Actual value is %s, expected %s" % (VNFD.VDU.uncorrected_error_notification, tcInput.vnfd.vdu.uncorrected_error_notification))
        logger.close_handlers()
        return ERROR

    logger.write_info("TC_VNFD_VDU_009 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus