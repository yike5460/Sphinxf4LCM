TC_VNFD_VDU_007	VNFD:VDU Network Elements Unit validation

Sequence:
1.  Verify network interface card capabilities like
    TCP Offload, Checksum Offload, Jumbo Frame, VLAN Tag stripping, RDMA support, SR-IOV support, DPDK support
    This is an optional attribute.
    vnfd:vdu:network_interface_card_capability
2.  Verify network speed/bandwidth to be guaranteed per requested NIC (optional)
    vnfd:vdu:network_interface_bandwidth
3.  Verify name and version of the data processing acceleration library used (optional)
    vnfd:vdu:data_processing_acceleration_library

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	VNFD File Link  vnfdFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
    tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "TC_VNFD_VDU_007.txt")

def TC_VNFD_VDU_007():

    logger.write_info("Starting TC_VNFD_VDU_007")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1. Verify network interface card capabilities like TCP Offload, Checksum Offload, Jumbo Frame, VLAN Tag stripping, RDMA support, SR-IOV support, DPDK support
    logger.write_info("Verifying vnfd:vdu:network_interface_card_capability")

    tcResult.overallStatus = SUCCESS

    try : tcInput.vnfd.vdu.network_interface_card_capability
    except NameError:
        tcInput.vnfd.vdu.network_interface_card_capability = None
        if VNFD.VDU.network_interface_card_capability is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VDU_007 - Execution completed with errors - VNFD file is containing network_interface_card_capability attribut")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.network_interface_card_capability <> tcInput.vnfd.vdu.network_interface_card_capability) and (tcInput.vnfd.vdu.network_interface_card_capability is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VDU_007 - Execution completed with errors - Unable to validate network_interface_card_capability parameter")
        //DONE [KS] Log the difference or both values; apply to below cases too
        logger.write_error("vnfd:vdu:network_interface_card_capability - Actual value is %s, expected %s" % (VNFD.VDU.network_interface_card_capability, tcInput.vnfd.vdu.network_interface_card_capability))
        logger.close_handlers()
        return ERROR

    2. Verify network speed/bandwidth to be guaranteed per requested NIC
    logger.write_info("Verifying vnfd:vdu:network_interface_bandwidth")

    try : tcInput.vnfd.vdu.network_interface_bandwidth
    except NameError:
        tcInput.vnfd.vdu.network_interface_bandwidth = None
        if VNFD.VDU.network_interface_bandwidth is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VDU_007 - Execution completed with errors - VNFD file is containing network_interface_bandwidth attribut")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.network_interface_bandwidth <> tcInput.vnfd.vdu.network_interface_bandwidth) and (tcInput.vnfd.vdu.network_interface_bandwidth is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VDU_007 - Execution completed with errors - Unable to validate network_interface_bandwidth parameter")
        logger.write_error("vnfd:vdu:network_interface_bandwidth - Actual value is %s, expected %s" % (VNFD.VDU.network_interface_bandwidth, tcInput.vnfd.vdu.network_interface_bandwidth))
        logger.close_handlers()
        return ERROR

    3. Verify name and version of the data processing acceleration library used
    logger.write_info("Verifying vnfd:vdu:data_processing_acceleration_library")

    try : tcInput.vnfd.vdu.data_processing_acceleration_library
    except NameError:
        tcInput.vnfd.vdu.data_processing_acceleration_library = None
        if VNFD.VDU.data_processing_acceleration_library is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VDU_007 - Execution completed with errors - VNFD file is containing data_processing_acceleration_library attribut")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.data_processing_acceleration_library <> tcInput.vnfd.vdu.data_processing_acceleration_library) and (tcInput.vnfd.vdu.data_processing_acceleration_library is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VDU_007 - Execution completed with errors - Unable to validate data_processing_acceleration_library parameter")
        logger.write_error("vnfd:vdu:data_processing_acceleration_library - Actual value is %s, expected %s" % (VNFD.VDU.data_processing_acceleration_library, tcInput.vnfd.vdu.data_processing_acceleration_library))
        logger.close_handlers()
        return ERROR

    logger.write_info("TC_VNFD_VDU_007 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus