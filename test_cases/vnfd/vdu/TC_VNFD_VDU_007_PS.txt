TC.11	VNFD:VDU Network Elements Unit validation

Sequence:
1.  Verify network interface card capabilities like
    TCP Offload, Checksum Offload, Jumbo Frame, VLAN Tag stripping, RDMA support, SR-IOV support, DPDK support
    vnfd:vdu:network_interface_card_capability
2.  Verify network speed/bandwidth to be guaranteed per requested NIC
    vnfd:vdu:network_interface_bandwidth
3.  Verify name and version of the data processing acceleration library used
    vnfd:vdu:data_processing_acceleration_library

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	VNFD File Link  vnfdFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
    tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "test_case_11.txt")

def test_case_11():

    logger.write_info("Starting test case 11")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1. Verify network interface card capabilities like TCP Offload, Checksum Offload, Jumbo Frame, VLAN Tag stripping, RDMA support, SR-IOV support, DPDK support
    logger.write_info("Verifying vnfd:vdu:network_interface_card_capability")

    tcResult.overallStatus = SUCCESS

    if tcInput.vnfd.vdu.network.network_interface_card_capability <> VNFD.VDU.network.network_interface_card_capability :
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 11 - Execution completed with errors - Unable to validate network_interface_card_capability parameter")
        [KS] Log the difference or both values; apply to below cases too
        logger.close_handlers()
        return ERROR

    2. Verify network speed/bandwidth to be guaranteed per requested NIC
    logger.write_info("Verifying vnfd:vdu:network_interface_bandwidth")

    if tcInput.vnfd.vdu.network.network_interface_bandwidth <> VNFD.VDU.network.network_interface_bandwidth :
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 11 - Execution completed with errors - Unable to validate network_interface_bandwidth")
        logger.close_handlers()
        return ERROR

    3. Verify name and version of the data processing acceleration library used
    logger.write_info("Verifying vnfd:vdu:data_processing_acceleration_library")

    if tcInput.vnfd.vdu.network.data_processing_acceleration_library <> VNFD.VDU.network.data_processing_acceleration_library :
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 11 - Execution completed with errors - Unable to validate data_processing_acceleration_library")
        logger.close_handlers()
        return ERROR

    logger.write_info("Test case 11 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus