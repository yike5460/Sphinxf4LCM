TC.4	VNFD validation for VNF release deployment

Sequence:
1.  Verify VNFD ID (e.g. name) for each file
2.  Verify vendor name is the same for both files
3.  Verify versions of the VNF Descriptor are different
4.  Verify versions of the VNF software are different
5.  Verify lifecycle event attribute is properly coded for each VNFD version - may be omitted
6.  Verify dependency attribute is properly coded for each VNFD version - may be omitted
7.  Verify monitoring parameter is properly coded for each VNFD version - may be omitted
8.  Verify auto scale policy attribute is properly coded for each VNFD version - may be omitted
9.  Verify manifest file attribute is properly coded for each VNFD version - may be omitted
10. Verify manifest file security attribute is properly coded for each VNFD version - may be omitted


Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
    VNFD File Link 1  vnfdFile_1
    VNFD File Link 2  vnfdFile_2

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]
    tcResult.vnfd.<parameter_name> should be found by parsing VNFD file
    tcInput.vnfd.<parameter_name> should be accordingly to vendor documentation

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "test_case_4.txt")

def test_case_4():

    logger.write_info("Starting test case 4")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1.	Verify VNFD ID (e.g. name) for each file
    logger.write_info("Verifying VNFD's ID")

    tcResult.overallStatus = SUCCESS

    tcResult.vnfd.id_1 = vnfdFile_1->vnfd:Id
    tcResult.vnfd.id_2 = vnfdFile_2->vnfd:Id
    if (tcResult.vnfd.id_1 != tcInput.vnfd.id_1) or (tcResult.vnfd.id_2 != tcInput.vnfd.id_2) :
        tcResult.overallStatus = status
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the VNFD ID attribute for VNFD file")
        if (tcResult.vnfd.id_1 != tcInput.vnfd.id_1) :
            logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.id_1, tcInput.vnfd.id_1))
        if (tcResult.vnfd.id_2 != tcInput.vnfd.id_2)
            logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.id_2, tcInput.vnfd.id_2))
        logger.close_handlers()
        return ERROR

    2.  Verify vendor name is the same for both files
    logger.write_info("Verifying vendor name")

    tcResult.vnfd.vendor_1 = vnfdFile_1->vnfd:vendor
    tcResult.vnfd.vendor_2 = vnfdFile_2->vnfd:vendor
    if (tcResult.vnfd.vendor_1 != tcInput.vnfd.vendor) or (tcResult.vnfd.vendor_2 != tcInput.vnfd.vendor):
        tcResult.overallStatus = status
        logger.write_error("Test case 4 - Execution completed with errors - VNFD files have different Vendor names")
        if (tcResult.vnfd.vendor_1 != tcInput.vnfd.vendor_1) :
            logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.vendor_1, tcInput.vnfd.vendor))
        if (tcResult.vnfd.vendor_2 != tcInput.vnfd.vendor_2)
            logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.vendor_2, tcInput.vnfd.vendor))
        logger.close_handlers()
        return ERROR

    3.  Verify versions of the VNF Descriptor are different
    logger.write_info("Verifying VNF Descriptor version")

    tcResult.vnfd.descriptor_version_1 = vnfdFile_1->vnfd:descriptor_version
    tcResult.vnfd.descriptor_version_2 = vnfdFile_2->vnfd:descriptor_version

    if (tcResult.vnfd.descriptor_version_1 == tcResult.vnfd.descriptor_version_2) :
        tcResult.overallStatus = status
        logger.write_error("Test case 4 - Execution completed with errors - VNFD files have same VNFD descriptor version")
        logger.close_handlers()
        return ERROR

    if (tcResult.vnfd.descriptor_version_1 != tcInput.vnfd.descriptor_version_1) or (tcResult.vnfd.descriptor_version_2 != tcInput.vnfd.descriptor_version_2) :
        tcResult.overallStatus = status
        logger.write_error("Test case 4 - Execution completed with errors - VNFD files have incorrect descriptor versions")
        if (tcResult.vnfd.descriptor_version_1 != tcInput.vnfd.descriptor_version_1) :
            logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.descriptor_version_1, tcInput.vnfd.descriptor_version_1))
        if (tcResult.vnfd.descriptor_version_2 != tcInput.vnfd.descriptor_version_2)
            logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.descriptor_version_2, tcInput.vnfd.descriptor_version_2))
        logger.close_handlers()
        return ERROR

    4.  Verify versions of the VNF software are different
    logger.write_info("Verifying VNF software version")

    tcResult.vnfd.version_1 = vnfdFile_1->vnfd:version
    tcResult.vnfd.version_2 = vnfdFile_2->vnfd:version

    if (tcResult.vnfd.version_1 == tcResult.vnfd.version_2) :
        tcResult.overallStatus = status
        logger.write_error("Test case 4 - Execution completed with errors - VNFD files have same software versions")
        logger.close_handlers()
        return ERROR

    if (tcResult.vnfd.version_1 != tcInput.vnfd.version_1) or (tcResult.vnfd.version_2 != tcInput.vnfd.version_2) :
        tcResult.overallStatus = status
        logger.write_error("Test case 4 - Execution completed with errors - VNFD files have incorrect software version")
        if (tcResult.vnfd.version_1 != tcInput.vnfd.version_1) :
            logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.version_1, tcInput.vnfd.version_1))
        if (tcResult.vnfd.version_2 != tcInput.vnfd.version_2)
            logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.version_2, tcInput.vnfd.version_2))
        logger.close_handlers()
        return ERROR

    5.  Verify lifecycle event attribute is properly coded for each VNFD version - may be omitted
    logger.write_info("Verifying lifecycle_event")

    tcResult.vnfd.lifecycle_event_1 = vnfdFile_1->vnfd:lifecycle_event
    tcResult.vnfd.lifecycle_event_2 = vnfdFile_2->vnfd:lifecycle_event

    try : tcInput.vnfd.lifecycle_event_1
    except NameError:
        tcInput.vnfd.lifecycle_event_1 = None
        if tcResult.vnfd.lifecycle_event_1 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 1 is containing lifecycle event attribut")
            logger.close_handlers()
            return ERROR

    try : tcInput.vnfd.lifecycle_event_2
    except NameError:
        tcInput.vnfd.lifecycle_event_2 = None          
        if tcResult.vnfd.lifecycle_event_2 is not None :
            tcResult.overallStatus = FAILED       
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 2 is containing lifecycle event attribut")
            logger.close_handlers()
            return ERROR

    if (tcResult.vnfd.lifecycle_event_1 != tcInput.vnfd.lifecycle_event_1) and (tcInput.vnfd.lifecycle_event_1 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the lifecycle event attribut for VNFD file 1")
        logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.lifecycle_event_1, tcInput.vnfd.lifecycle_event_1))
        logger.close_handlers()
        return ERROR

    if (tcResult.vnfd.lifecycle_event_2 != tcInput.vnfd.lifecycle_event_2) and (tcInput.vnfd.lifecycle_event_2 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the lifecycle event attribut for VNFD file 2")
        logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.lifecycle_event_2, tcInput.vnfd.lifecycle_event_2))
        logger.close_handlers()
        return ERROR   
    
    6.  Verify dependency attribute is properly coded for each VNFD version - may be omitted
    logger.write_info("Verifying dependency")

    tcResult.vnfd.dependency_1 = vnfdFile_1->vnfd:dependency
    tcResult.vnfd.dependency_2 = vnfdFile_2->vnfd:dependency

    try : tcInput.vnfd.dependency_1
    except NameError:
        tcInput.vnfd.dependency_1 = None
        if tcResult.vnfd.dependency_1 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 1 is containing dependency attribut")
            logger.close_handlers()
            return ERROR

    try : tcInput.vnfd.dependency_2
    except NameError:
        tcInput.vnfd.dependency_2 = None          
        if tcResult.vnfd.dependency_2 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 2 is containing dependency attribut")
            logger.close_handlers()
            return ERROR

    if (tcResult.vnfd.dependency_1 != tcInput.vnfd.dependency_1) and (tcInput.vnfd.dependency_1 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the dependency attribut for VNFD file 1")
        logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.dependency_1, tcInput.vnfd.dependency_1))
        logger.close_handlers()
        return ERROR

    if (tcResult.vnfd.dependency_2 != tcInput.vnfd.dependency_2) and (tcInput.vnfd.dependency_2 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the dependency attribut for VNFD file 2")
        logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.dependency_2, tcInput.vnfd.dependency_2))
        logger.close_handlers()
        return ERROR   

    7.  Verify monitoring parameter is properly coded for each VNFD version - may be omitted
    logger.write_info("Verifying monitoring parameter")

    tcResult.vnfd.monitoring_parameter_1 = vnfdFile_1->vnfd:monitoring_parameter
    tcResult.vnfd.monitoring_parameter_2 = vnfdFile_2->vnfd:monitoring_parameter

    try : tcInput.vnfd.monitoring_parameter_1
    except NameError:
        tcInput.vnfd.monitoring_parameter_1 = None
        if tcResult.vnfd.monitoring_parameter_1 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 1 is containing monitoring_parameter attribut")
            logger.close_handlers()
            return ERROR

    try : tcInput.vnfd.monitoring_parameter_2
    except NameError:
        tcInput.vnfd.monitoring_parameter_2 = None          
        if tcResult.vnfd.monitoring_parameter_2 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 2 is containing monitoring_parameter attribut")
            logger.close_handlers()
            return ERROR

    if (tcResult.vnfd.monitoring_parameter_1 != tcInput.vnfd.monitoring_parameter_1) and (tcInput.vnfd.monitoring_parameter_1 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the monitoring_parameter attribut for VNFD file 1")
        logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.monitoring_parameter_1, tcInput.vnfd.monitoring_parameter_1))
        logger.close_handlers()
        return ERROR

    if (tcResult.vnfd.monitoring_parameter_2 != tcInput.vnfd.monitoring_parameter_2) and (tcInput.vnfd.monitoring_parameter_2 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the monitoring_parameter attribut for VNFD file 2")
        logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.monitoring_parameter_2, tcInput.vnfd.monitoring_parameter_2))
        logger.close_handlers()
        return ERROR   

    8.  Verify auto scale policy attribute is properly coded for each VNFD version - may be omitted
    logger.write_info("Verifying auto scale policy")

    tcResult.vnfd.auto_scale_policy_1 = vnfdFile_1->vnfd:auto_scale_policy
    tcResult.vnfd.auto_scale_policy_2 = vnfdFile_2->vnfd:auto_scale_policy

    try : tcInput.vnfd.auto_scale_policy_1
    except NameError:
        tcInput.vnfd.auto_scale_policy_1 = None          
        if tcResult.vnfd.auto_scale_policy_1 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 1 is containing auto_scale_policy attribut")
            logger.close_handlers()
            return ERROR

    try : tcInput.vnfd.auto_scale_policy_2
    except NameError:
        tcInput.vnfd.auto_scale_policy_2 = None          
        if tcResult.vnfd.auto_scale_policy_2 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 2 is containing auto_scale_policy attribut")
            logger.close_handlers()
            return ERROR            

    if (tcResult.vnfd.auto_scale_policy_1 != tcInput.vnfd.auto_scale_policy_1) and (tcInput.vnfd.auto_scale_policy_1 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the auto_scale_policy attribut for VNFD file 1")
        logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.auto_scale_policy_1, tcInput.vnfd.auto_scale_policy_1))
        logger.close_handlers()
        return ERROR

    if (tcResult.vnfd.auto_scale_policy_2 != tcInput.vnfd.auto_scale_policy_2) and (tcInput.vnfd.auto_scale_policy_2 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the auto_scale_policy attribut for VNFD file 2")
        logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.auto_scale_policy_2, tcInput.vnfd.auto_scale_policy_2))
        logger.close_handlers()
        return ERROR   

    9.  Verify manifest file attribute is properly coded for each VNFD version - may be omitted
    logger.write_info("Verifying manifest file")

    tcResult.vnfd.manifest_file_1 = vnfdFile_1->vnfd:manifest_file
    tcResult.vnfd.manifest_file_2 = vnfdFile_2->vnfd:manifest_file

    try : tcInput.vnfd.manifest_file_1
    except NameError:
        tcInput.vnfd.manifest_file_1 = None          
        if tcResult.vnfd.manifest_file_1 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 1 is containing manifest_file attribut")
            logger.close_handlers()
            return ERROR

    try : tcInput.vnfd.manifest_file_2
    except NameError:
        tcInput.vnfd.manifest_file_2 = None          
        if tcResult.vnfd.manifest_file_2 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 2 is containing manifest_file attribut")
            logger.close_handlers()
            return ERROR            

    if (tcResult.vnfd.manifest_file_1 != tcInput.vnfd.manifest_file_1) and (tcInput.vnfd.manifest_file_1 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the manifest_file attribut for VNFD file 1")
        logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.manifest_file_1, tcInput.vnfd.manifest_file_1))
        logger.close_handlers()
        return ERROR

    if (tcResult.vnfd.manifest_file_2 != tcInput.vnfd.manifest_file_2) and (tcInput.vnfd.manifest_file_2 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the manifest_file attribut for VNFD file 2")
        logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.manifest_file_2, tcInput.vnfd.manifest_file_2))
        logger.close_handlers()
        return ERROR   

    10. Verify manifest file security attribute is properly coded for each VNFD version - may be omitted
    logger.write_info("Verifying manifest file security")

    tcResult.vnfd.manifest_file_security_1 = vnfdFile_1->vnfd:manifest_file_security
    tcResult.vnfd.manifest_file_security_2 = vnfdFile_2->vnfd:manifest_file_security

    try : tcInput.vnfd.manifest_file_security_1
    except NameError:
        tcInput.vnfd.manifest_file_security_1 = None          
        if tcResult.vnfd.manifest_file_security_1 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 1 is containing manifest_file_security attribut")
            logger.close_handlers()
            return ERROR

    try : tcInput.vnfd.manifest_file_security_2
    except NameError:
        tcInput.vnfd.manifest_file_security_2 = None          
        if tcResult.vnfd.manifest_file_security_2 is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("Test case 4 - Execution completed with errors - VNFD file 2 is containing manifest_file_security attribut")
            logger.close_handlers()
            return ERROR            

    if (tcResult.vnfd.manifest_file_security_1 != tcInput.vnfd.manifest_file_security_1) and (tcInput.vnfd.manifest_file_security_1 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the manifest_file_security attribut for VNFD file 1")
        logger.write_error("VNFD File 1 - Actual value is %s, expected %s" % (tcResult.vnfd.manifest_file_security_1, tcInput.vnfd.manifest_file_security_1))
        logger.close_handlers()
        return ERROR

    if (tcResult.vnfd.manifest_file_security_2 != tcInput.vnfd.manifest_file_security_2) and (tcInput.vnfd.manifest_file_security_2 is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 4 - Execution completed with errors - VNFD file has incorrectly coded the manifest_file_security attribut for VNFD file 2")
        logger.write_error("VNFD File 2 - Actual value is %s, expected %s" % (tcResult.vnfd.manifest_file_security_2, tcInput.vnfd.manifest_file_security_2))
        logger.close_handlers()
        return ERROR   

    logger.write_error("Test case 4 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus