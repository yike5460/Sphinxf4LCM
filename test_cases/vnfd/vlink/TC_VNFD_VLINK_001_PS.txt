TC_VNFD_VLINK_001	VNFD:VDU Virtual Link validation

Sequence:
1.	Verify internal Virtual Link unique identifier
vnfd:vdu:virtual_link:id
2.	Verify connectivity type (e.g. E-LINE, E-LAN or E-Tree)
vnfd:vdu:virtual_link:connectivity_type
3.	Verify references to Connection Points (vnfd:vdu:vnfc:connection_point:id, vnfd:connection_point:id)
vnfd:vdu:virtual_link:connection_points_references
4.	Verify required throughput of the link (e.g. bandwidth of E-Line, root bandwidth of E-Tree and aggregate capacity of E_LAN)
vnfd:vdu:virtual_link:root_requirements
5.	Verify required throughput of leaf connections to the link (for E-Tree and E-LAN branches)
This is an optional attribute.
vnfd:vdu:virtual_link:leaf_requirements
6.	Verify QoS options to be supported on the VL e.g. latency, jitter, etc. (optional)
vnfd:vdu:virtual_link:qos
7.	Verify test access facilities to be supported on the VL (e.g. none, passive monitoring, or active (intrusive) loopbacks at endpoints)
This is an optional attribute.
vnfd:vdu:virtual_link:test_access

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	VNFD File Link  vnfdFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module

# instantiate logger
logger = logging_module.LoggingClass(__name__, "TC_VNFD_VLINK_001.txt")

def TC_VNFD_VLINK_001():

    logger.write_info("Starting TC_VNFD_VLINK_001")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1.	Verify internal Virtual Link unique identifier
    logger.write_info("Verifying vnfd:vdu:virtual_link:id")

    tcResult.overallStatus = SUCCESS

    if VNFD.VDU.virtual_link.id <> tcInput.vnfd.vdu.virtual_link.id :
        tcResult.overallStatus = status
        logger.write_error("TC_VNFD_VDU_001 - Execution completed with errors - Unable to validate virtual link ID")
        logger.write_error("vnfd:vdu:virtual_link:id - Actual value is %s, expected %s" % (VNFD.VDU.virtual_link.id, tcInput.vnfd.vdu.virtual_link.id))
        logger.close_handlers()
        return ERROR

    2.	Verify connectivity type (e.g. E-LINE, E-LAN or E-Tree)
    logger.write_info("Verifying vnfd:vdu:virtual_link:connectivity_type")

    if VNFD.VDU.virtual_link.connectivity_type <> tcInput.vnfd.vdu.virtual_link.connectivity_type :
        tcResult.overallStatus = status
        logger.write_error("TC_VNFD_VDU_001 - Execution completed with errors - Unable to validate virtual link connectivity type")
        logger.write_error("vnfd:vdu:virtual_link:connectivity_type - Actual value is %s, expected %s" % (VNFD.VDU.virtual_link.connectivity_type, tcInput.vnfd.vdu.virtual_link.connectivity_type))
        logger.close_handlers()
        return ERROR

    3.	Verify references to Connection Points (vnfd:vdu:vnfc:connection_point:id, vnfd:connection_point:id)
    logger.write_info("Verifying vnfd:vdu:virtual_link:connection_points_references")

    if VNFD.VDU.virtual_link.connection_points_references <> tcInput.vnfd.vdu.virtual_link.connection_points_references :
        tcResult.overallStatus = status
        logger.write_error("TC_VNFD_VDU_001 - Execution completed with errors - Unable to validate virtual link connection points references")
        logger.write_error("vnfd:vdu:virtual_link:connection_points_references - Actual value is %s, expected %s" % (VNFD.VDU.virtual_link.connection_points_references, tcInput.vnfd.vdu.virtual_link.connection_points_references))
        logger.close_handlers()
        return ERROR

    4.	Verify required throughput of the link (e.g. bandwidth of E-Line, root bandwidth of E-Tree and aggregate capacity of E_LAN)
    logger.write_info("Verifying vnfd:vdu:virtual_link:root_requirements")

    if VNFD.VDU.virtual_link.root_requirement <> tcInput.vnfd.vdu.virtual_link.root_requirement :
        tcResult.overallStatus = status
        logger.write_error("TC_VNFD_VDU_001 - Execution completed with errors - Unable to validate virtual link root requirement")
        logger.write_error("vnfd:vdu:virtual_link:root_requirement - Actual value is %s, expected %s" % (VNFD.VDU.virtual_link.root_requirement, tcInput.vnfd.vdu.virtual_link.root_requirement))
        logger.close_handlers()
        return ERROR

    5.	Verify required throughput of leaf connections to the link (for E-Tree and E-LAN branches)
    logger.write_info("Verifying vnfd:vdu:virtual_link:leaf_requirements")

    try : tcInput.vnfd.vdu.virtual_link.leaf_requirement
    except NameError:
        tcInput.vnfd.vdu.virtual_link.leaf_requirement = None
        if VNFD.VDU.virtual_link.leaf_requirement is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VLINK_001 - Execution completed with errors - VNFD file is containing leaf_requirement attribute")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.virtual_link.leaf_requirement <> tcInput.vnfd.vdu.virtual_link.leaf_requirement) and (tcInput.vnfd.vdu.virtual_link.leaf_requirement is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VLINK_001 - Execution completed with errors - Unable to validate leaf_requirement parameter")
        logger.write_error("vnfd:vdu:virtual_link:leaf_requirement - Actual value is %s, expected %s" % (VNFD.VDU.virtual_link.leaf_requirement, tcInput.vnfd.vdu.virtual_link.leaf_requirement))
        logger.close_handlers()
        return ERROR

    6.	Verify QoS options to be supported on the VL e.g. latency, jitter, etc.
    logger.write_info("Verifying vnfd:vdu:virtual_link:qos")

    try : tcInput.vnfd.vdu.virtual_link.qos
    except NameError:
        tcInput.vnfd.vdu.virtual_link.qos = None
        if VNFD.VDU.virtual_link.qos is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VLINK_001 - Execution completed with errors - VNFD file is containing qos attribute")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.virtual_link.qos <> tcInput.vnfd.vdu.virtual_link.qos) and (tcInput.vnfd.vdu.virtual_link.qos is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VLINK_001 - Execution completed with errors - Unable to validate qos parameter")
        logger.write_error("vnfd:vdu:virtual_link:qos - Actual value is %s, expected %s" % (VNFD.VDU.virtual_link.qos, tcInput.vnfd.vdu.virtual_link.qos))
        logger.close_handlers()
        return ERROR

    7.	Verify test access facilities to be supported on the VL (e.g. none, passive monitoring, or active (intrusive) loopbacks at endpoints)
    logger.write_info("Verifying vnfd:vdu:virtual_link:test_access")

    try : tcInput.vnfd.vdu.virtual_link.test_access
    except NameError:
        tcInput.vnfd.vdu.virtual_link.test_access = None
        if VNFD.VDU.virtual_link.qos is not None :
            tcResult.overallStatus = FAILED
            logger.write_error("TC_VNFD_VLINK_001 - Execution completed with errors - VNFD file is containing test_access attribute")
            logger.close_handlers()
            return ERROR

    if (VNFD.VDU.virtual_link.test_access <> tcInput.vnfd.vdu.virtual_link.test_access) and (tcInput.vnfd.vdu.virtual_link.test_access is not None):
        tcResult.overallStatus = FAILED
        logger.write_error("TC_VNFD_VLINK_001 - Execution completed with errors - Unable to validate test_access parameter")
        logger.write_error("vnfd:vdu:virtual_link:test_access - Actual value is %s, expected %s" % (VNFD.VDU.virtual_link.test_access, tcInput.vnfd.vdu.virtual_link.test_access))
        logger.close_handlers()
        return ERROR

    logger.write_info("TC_VNFD_VLINK_001 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus