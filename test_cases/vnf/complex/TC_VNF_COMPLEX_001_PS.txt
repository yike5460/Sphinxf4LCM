TC_VNF_COMPLEX_001 VNF Start and Scaling with max traffic load

Sequence:
1. Instantiate VNF
2. Validate VNF is in state Inactive
3. Start the max traffic load
4. Validate no traffic goes through
5. Start the VNF (--> time stamp)
6. Validate the state is "Active" (--> time stamp)
7. Wait for the VNF to scale up to the maximum (--> time stamp)
8. Validate traffic flows with no dropped packets (--> time stamp)
9. Validate the allocated vResources are on max level
10. Calculate the time for the activation (first time stamp arrival and no dropped packets)
11. Stop VNF
12. Ensure that no traffic flows once stop is completed
13. Stop Traffic Load
14. Terminate VNF

Pseudo Code:

Input
# All required input information are stored in the test case input variable tcInput and includes following information:
    SwImageID
    EM Config File Link -> emConfigFile
    VNF Config File Link -> vnfConfigFile
    VNF License File Link -> vnfLicenseFile
    Traffic Configuration Parameter -> trafficConfigParameter

# Test Results are stored in the test case result variable tcResult

import logging_module
import VNFRECORD
import ElementManagement
import VNF
import VNFM.VNF
import Traffic


def TC_VNF_COMPLEX_001(tcInput):

	# instantiate logger
	logger = logging_module.LoggingClass(__name__, "TC_VNF_COMPLEX_001.txt")
    logger.write_info("Starting TC_VNF_COMPLEX_001")

    vnfRecord = VNFRECORD.Create(logger)
	em = ElementManagement.EMClass(logger)
    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)
    traffic = Traffic.TrafficClass(logger)

    tcResult.overallStatus = SUCCESS

    1. Instantiate VNF
    logger.write_info("Instantiating VNF")

    if EM_VNF_SYSTEM == TRUE :
        # Instantiate ElementManagement
        # Set the required EM configuration so that VNF can be configured by EM
        if ( status = em.SetEMConfiguration( vnfRecord, tcInput.emConfigFile )) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at setting the EM config file")
            logger.close_handlers()
            return tcResult
        # Start the EM so that it can service the VNF
        if ( status = em.StartEM( vnfRecord ) ) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at starting the EM")
            logger.close_handlers()
            return tcResult
    else:
        # No Element Manager required, set VNF config and license
        if ( status = vnf.SetVNFConfigFile( vnfRecord, tcInput.vnfConfigFile ) ) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at setting the VNF config file")
            logger.close_handlers()
            return tcResult

        if ( status = vnf.SetVNFLicense( vnfRecord, tcInput.vnfLicenseFile ) ) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at setting the VNF license file")
            logger.close_handlers()
            return tcResult

    status = vnfm_vnf.Instantiate( vnfRecord, tcInput.SwImageID )
    if status <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at instantiating the VNF")
        logger.close_handlers()
        return tcResult

    2. Validate VNF is in state Inactive
    logger.write_info("Validating VNF is in state 'Inactive'")

    #allow the VNF to get into the inactive state
    wait_time = MAX_VNF_INSTANTIATION_TIME
    while ( vnfState = vnfm_vnf.GetVNFState( vnfRecord ) ) <> VNF_STATE_INACTIVE :
        if vnfState == VNF_STATE_ERROR :
            tcResult.overallStatus = vnfState
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at validating the VNF is in 'Inactive' state")
            logger.close_handlers()
            return tcResult
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at waiting for the VNF to be in 'Inactive' state")
            logger.close_handlers()
            return tcResult
        time.sleep( 1 sec )

    3. Start the max traffic load
    logger.write_info("Starting the max traffic load")

    if (status = traffic.ConfigTrafficLoad( MAX_TRAFFIC_LOAD, tcInput.trafficConfigParameter )) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at configuring max traffic load")
        logger.close_handlers()
        return tcResult

    if (status = traffic.StartTraffic()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at starting traffic")
        logger.close_handlers()
        return tcResult

    4. Validate no traffic goes through
    logger.write_info("Validating no traffic goes through")

    if (status = traffic.DoesTrafficFlow()) <> FALSE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at validating no traffic flows")
        logger.close_handlers()
        return tcResult

    5. Start the VNF (--> time stamp)
    logger.write_info("Starting the VNF")

    tcResult.timeRecord.VNFStart = time.clock()

    status = vnfm_vnf.Start( vnfRecord )
    if  status <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at starting the VNF")
        logger.close_handlers()
        return tcResult

    6. Validate the state is "Active" (--> time stamp)
    logger.write_info("Validating VNF state is 'Active'")

    wait_time = MAX_VNF_ACTIVATE_TIME
    while ( vnfState = vnfm_vnf.GetVNFState( vnfRecord ) ) <> VNF_STATE_ACTIVE :
        if vnfState == VNF_STATE_ERROR :
            vnfm_vnf.Terminate( vnfRecord )
            tcResult.overallStatus = vnfState
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at validating the VNF is in 'Active' state")
            logger.close_handlers()
            return tcResult
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at waiting for the VNF to be in 'Active' state")
            logger.close_handlers()
            return tcResult
        time.sleep( 1 sec )
    tcResult.timeRecord.VNFInStateActive = time.clock()

    7. Wait for the VNF to scale up to the maximum (--> time stamp)
    logger.write_info("Waiting for the VNF to scale up to the maximum")

    wait_time = MAX_VNF_SCALING_UP_TIME
    while ( status = traffic.AnyTrafficLoss() ) == TRUE  :
        if wait_time-- == 0 :
            tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at waiting for the VNF to scale up to the maximum)
            logger.close_handlers()
            return tcResult
        time.sleep( 1 sec )
    tcResult.timeRecord.VNFScalingUpFinished = time.clock()

    8. Validate traffic flows with no dropped packets (--> time stamp)
    logger.write_info("Validating traffic flows with no dropped packets")

    if (status = traffic.DoesTrafficFlow()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at validating traffic flows")
        logger.close_handlers()
        return tcResult

    if (status = traffic.AnyTrafficLoss()) == TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at validating there is no traffic loss")
        logger.close_handlers()
        return tcResult

    tcResult.timeRecord.NoDroppedPackets = time.clock()

    9. Validate the allocated vResources are on max level
    logger.write_info("Validating the allocated vResources are on max level")

    if (status = vnfm_vnf.ValidateAllocatedvResources( vnfRecord, tcInput.SwImageID, MAX_VRESOURCE_LEVEL )) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at validating the allocated vResources")
        logger.close_handlers()
        return tcResult

    10. Calculate the time for the activation (first time stamp arrival and no dropped packets)
    logger.write_info("Calculating the time for the activation")

    tcResult.timeRecord.trafficActivateTime = traffic.CalculateActivationTime()

    tcResult.timeRecord.serviceDisruption = traffic.CalculateServiceDisruption()

    tcResult.timeRecord.scalingUpTime = tcResult.timeRecord.VNFScalingUpFinished - tcResult.timeRecord.VNFInStateActive

    tcResult.timeRecord.activationTime = tcResult.timeRecord.NoDroppedPackets - tcResult.timeRecord.VNFStart

    11. Stop VNF
    logger.write_info("Stopping VNF")

    status = vnfm_vnf.Stop( vnfRecord )
    if  status <> SUCCESS :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at stopping the VNF")
        logger.close_handlers()
        return tcResult

    12. Ensure that no traffic flows once stop is completed
    logger.write_info("Validating no traffic flows through")

    if (status = traffic.DoesTrafficFlow()) == TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at validating no traffic flows")
        logger.close_handlers()
        return tcResult

    13. Stop Traffic Load
    logger.write_info("Stopping traffic load")

    if (status = traffic.Stop()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_001 execution completed with failure at stopping traffic")
        logger.close_handlers()
        return tcResult

    14. Terminate VNF
    logger.write_info("Terminating VNF")

    vnfm_vnf.Terminate( vnfRecord )

    vnfrecord.Delete()

    logger.write_info("TC_VNF_COMPLEX_001 execution completed successfully")

    logger.close_handlers()

    return tcResult
