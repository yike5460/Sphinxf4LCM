TC_VNF_COMPLEX_004 VNF upgrade, update or rollback in state Active with max traffic

Sequence:
1. Instantiate VNF
2. Validate VNF is in state Inactive
3. Start the VNF
4. Validate VNF is in state Active
5. Generate low traffic load
6. Validate that traffic flows through without issues (--> no dropped packets)
7. Trigger a resize of the NFV resources to the maximum
8. Start the max traffic load
9. Validate traffic goes through (--> no dropped packets)
10. Initiate the upgrade, update or rollback process
11. Validate VNF new version is active and state is Active
12. Validate VNF has scaled up to the max level, traffic gets forwarded and measure the length of service disruption
13. Stop Traffic
14. Terminate VNF
15. Validate that all vResources have been released

Pseudo Code:

Input
# All required input information are stored in the test case input variable tcInput and includes following information:
    SwImageID
    NewSwImageID
    EM Config File Link -> emConfigFile
    VNF Config File Link -> vnfConfigFile
    VNF License File Link -> vnfLicenseFile
    Traffic Configuration Parameter -> trafficConfigParameter
    Trigger type --> triggerType
        - command to the VNFM
        - higher traffic load over a longer period of time
        - triggered by EM
        - triggered by VNF
    Type of vResource to be resized --> vResourceType
        - vMemory
        - vCPU cores
        - vStorage
        - vNIC or specialized hardware
        - vResource = any
    Process type --> processType
        - upgrade
        - update
        - rollback

# Test Results are stored in the test case result variable tcResult

import logging_module
import VNFRECORD
import ElementManagement
import VNF
import VNFM.VNF
import Traffic

# instantiate logger
logger = logging_module.LoggingClass(__name__, "TC_VNF_COMPLEX_004.txt")

def TC_VNF_COMPLEX_004(tcInput):

    logger.write_info("Starting TC_VNF_COMPLEX_004")

    vnfrecord = VNFRECORD.VNFRECORDClass(logger)
    em = ElementManagement.EMClass(logger)
    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)
    traffic = Traffic.TrafficClass(logger)

    tcResult.overallStatus = SUCCESS

    vnfRecord = vnfrecord.Create()

    1. Instantiate VNF
    logger.write_info("Instantiating VNF")

    if EM_VNF_SYSTEM == TRUE :
        # Instantiate ElementManagement
        # Set the required EM configuration so that VNF can be configured by EM
        if ( status = em.SetEMConfiguration( vnfRecord, tcInput.emConfigFile )) <> TRUE :
			vnfm_vnf.Terminate( vnfRecord )
            tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at setting the EM config file")
            logger.close_handlers()
            return ERROR
        # Start the EM so that it can service the VNF
        if ( status = em.StartEM( vnfRecord ) ) <> TRUE :
            vnfm_vnf.Terminate( vnfRecord )
			tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at starting the EM")
            logger.close_handlers()
            return ERROR
    else:
        # No Element Manager required, set VNF config and license
        if ( status = vnf.SetVNFConfigFile( vnfRecord, tcInput.vnfConfigFile ) ) <> TRUE :
			vnfm_vnf.Terminate( vnfRecord )
            tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at setting the VNF config file")
            logger.close_handlers()
            return ERROR

        if ( status = vnf.SetVNFLicense( vnfRecord, tcInput.vnfLicenseFile ) ) <> TRUE :
			vnfm_vnf.Terminate( vnfRecord )
            tcResult.overallStatus = status
            logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at setting the VNF license file")
            logger.close_handlers()
            return ERROR

    status = vnfm_vnf.Instantiate( vnfRecord, tcInput.SwImageID )
    if status <> TRUE :
		vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at instantiating the VNF")
        logger.close_handlers()
        return ERROR

    2. Validate VNF is in state Inactive
    logger.write_info("Validating VNF is in state 'Inactive'")

    #allow the VNF to get into the inactive state
    wait_time = MAX_VNF_INSTANTIATION_TIME
    while ( vnfState = vnfm_vnf.GetVNFState( vnfRecord ) ) <> VNF_STATE_INACTIVE :
        if vnfState == VNF_STATE_ERROR :
			vnfm_vnf.Terminate( vnfRecord )
            tcResult.overallStatus = vnfState
            logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating the VNF is in 'Inactive' state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
			vnfm_vnf.Terminate( vnfRecord )
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at waiting for the VNF to be in 'Inactive' state")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    3. Start the VNF
    logger.write_info("Starting the VNF")

    status = vnfm_vnf.Start( vnfRecord )
    if  status <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at starting the VNF")
        logger.close_handlers()
        return ERROR

    4. Validate VNF is in state Active
    logger.write_info("Validating VNF is in state 'Active'")

    wait_time = MAX_VNF_ACTIVATE_TIME
    while ( vnfState = vnfm_vnf.GetVNFState( vnfRecord ) ) <> VNF_STATE_ACTIVE :
        if vnfState == VNF_STATE_ERROR :
            vnfm_vnf.Terminate( vnfRecord )
            tcResult.overallStatus = vnfState
            logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating the VNF is in 'Active' state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
            vnfm_vnf.Terminate( vnfRecord )
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at waiting for the VNF to be in 'Active' state")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    5. Generate low traffic load
    logger.write_info("Generating low traffic load")

    if (status = traffic.ConfigTrafficLoad( LOW_TRAFFIC_LOAD, tcInput.trafficConfigParameter )) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at configuring low traffic load")
        logger.close_handlers()
        return ERROR

    if (status = traffic.StartTraffic()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at starting traffic")
        logger.close_handlers()
        return ERROR

    6. Validate that traffic flows through without issues (--> no dropped packets)
    logger.write_info("Validating traffic flows through without issues)

    if (status = traffic.DoesTrafficFlow()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating traffic flows")
        logger.close_handlers()
        return ERROR

    if (status = traffic.AnyTrafficLoss()) == TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating there is no traffic loss")
        logger.close_handlers()
        return ERROR

    7. Trigger a resize of the NFV resources to the maximum
    logger.write_info("Triggering a resize of the NFV resources to the maximum")

    if (status = vnfm_vnf.TriggerResizevRresources( vnfRecord, tcInput.triggerType, MAX_RESIZE_LEVEL, tcInput.vResourceType )) <> TRUE :
        traffic.stopTraffic()
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at resizing the VNF resources to the maximum")
        logger.close_handlers()
        return ERROR

    8. Start the max traffic load
    logger.write_info("Starting the max traffic load")

    if (status = traffic.ConfigTrafficLoad( MAX_TRAFFIC_LOAD, tcInput.trafficConfigParameter )) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at configuring max traffic load")
        logger.close_handlers()
        return ERROR

    9. Validate traffic goes through (--> no dropped packets)
    logger.write_info("Validating traffic goes through")

    if (status = traffic.DoesTrafficFlow()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating traffic flows")
        logger.close_handlers()
        return ERROR

    if (status = traffic.AnyTrafficLoss()) == TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating there is no traffic loss")
        logger.close_handlers()
        return ERROR

    10. Initiate the upgrade, update or rollback process
    logger.write_info("Initiates the tcInput.processType process")

    if tcInput.processType == "upgrade":
        status = vnfm_vnf.Upgrade( vnfRecord, tcInput.NewSwImageID )
    else if tcInput.rocessType == "update" :
        status = vnfm_vnf.Update( vnfRecord, tcInput.NewSwImageID )
    else if tcInput.processType == "rollback" :
        status = vnfm_vnf.Rollback( vnfRecord, tcInput.NewSwImageID )

    11. Validate VNF new version is active and state is Active
    logger.write_info("Validating new VNF version is in place and state is 'Active'")

    if status <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating the new VNF version is in place")
        logger.close_handlers()
        return ERROR

    if ( vnfState = vnfm_vnf.GetVNFState( vnfRecord )) <> VNF_STATE_ACTIVE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating the new VNF version is in 'Active' state")
        logger.close_handlers()
        return ERROR

    12. Validate VNF has scaled up to the max level, traffic gets forwarded and measure the length of service disruption
    logger.write_info("Validating VNF has scaled up to the max level")

    tcResult.resourceList.maxResource = vnfm_vnf.GetvResourceList( vnfRecord )

    if (status = vnfm_vnf.ValidateAllocatedvResources( vnfRecord, tcInput.SwImageID, MAX_VRESOURCE_LEVEL )) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating the allocated vResources")
        logger.close_handlers()
        return ERROR

    logger.write_info("Validating traffic gets forwarded")

    if (status = traffic.DoesTrafficFlow()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating traffic flows")
        logger.close_handlers()
        return ERROR

    if (status = traffic.AnyTrafficLoss()) == TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at validating there is no traffic loss")
        logger.close_handlers()
        return ERROR

    logger.write_info("Measuring the length of service disruption")

    tcResult.serviceDisruption = traffic.CalculateServiceDisruptionLength()

    13. Stop Traffic
    logger.write_info("Stopping traffic")

    if (status = traffic.Stop()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at stopping traffic")
        logger.close_handlers()
        return ERROR

    14. Terminate VNF
    logger.write_info("Terminating VNF")

    vnfm_vnf.Terminate( vnfRecord )

    15. Validate that all vResources have been released
    logger.write_info("Validating all vResources have been released")

    if (status = vnfm_vnf.AllvResourcesReleased( vnfRecord )) <> TRUE :
		vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_COMPLEX_004 execution completed with failure at terminating the VNF")
        logger.close_handlers()
        return ERROR

    vnfrecord.Delete()

    logger.write_info("TC_VNF_COMPLEX_004 execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus
