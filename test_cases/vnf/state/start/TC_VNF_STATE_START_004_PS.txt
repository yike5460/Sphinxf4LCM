TC.33	VNF Start with normal traffic load and measure start time

Sequence:
1. Instantiate VNF
2. Validate VNF is in State Inactive
3. Start the normal traffic load
4. Validate no traffic goes through
5. Start the VNF (--> time stamp)
6. Validate the state is "Active"
7. Validate the provided functionality and calculate the time for the activation (first time stamp arrival and no dropped packets)
8. Validate no scaling had occurred
9. Stop VNF
10. Ensure that no traffic flows once stop is completed
11. Stop Traffic Load
12. Terminate VNF

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	SwImageID
	EM Config File Link -> emConfigFile
	VNF Config File Link -> vnfConfigFile
	VNF License File Link -> vnfLicenseFile

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module
import VNFRECORD
import VNF
import VNFM.VNF
import traffic

# instantiate logger
logger = logging_module.LoggingClass(__name__, "test_case_33.txt")

def test_case_33():

    logger.write_info("Starting test case 33")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)


    1. Instantiate VNF
    logger.write_info("Instantiating the VNF")

    tcResult.overallStatus = SUCCESS

    # Create the VNFRECORD object
    vnfRecord = VNFRECORD.Create()
    if vnfRecord == FALSE :
        tcResult.overallStatus = vnfRecord
        logger.write_error("Test case 33 - Execution completed with errors - Unable to create vnfRecord")
        logger.close_handlers()
        return ERROR

    # Check Element Manager or configuration file
    if EM_VNF_SYSTEM == TRUE :
        # Instantiate ElementManagement
        # Set the required EM configuration so that VNF can be configured by EM
        if ( status = ElementManagement.SetEMConfiguration(vnfRecord, tcInput.emConfigFile)) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("Test case 33 - Execution completed with errors - Unable to set EM config file")
            logger.close_handlers()
            return ERROR
        # Start the EM so that it can service the VNF
        if ( status = ElementManagement.StartEM(vnfRecord) ) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("Test case 33 - Execution completed with errors - Unable to start EM")
            logger.close_handlers()
            return ERROR
    else:
        # No Element Manager required, set VNF config and license
        if ( status = VNF.SetVNFConfigFile(vnfRecord, tcInput.vnfConfigFile) ) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("Test case 33 - Execution completed with errors - Unable to set VNF config file")
            logger.close_handlers()
            return ERROR

    if ( status = VNF.SetVNFLicense(vnfRecord, tcInput.vnfLicenseFile) ) <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to set VNF License file")
        logger.close_handlers()
        return ERROR

    if ( status = VNFM.VNF.Instantiate(vnfRecord, tcInput.SwImageID) ) <> TRUE
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to instantiate VNF")
        logger.close_handlers()
        return ERROR

    2. Validate VNF state is Inactive
    logger.write_info("Validating VNF state is 'Inactive'")

    #allow the VNF to get into the inactive state
    wait_time = MAX_VNF_INSTATIATION_TIME
    while ( vnfState = VNFM.VNF.GetVNFState(vnfRecord) ) <> VNF_STATE_INACTIVE :
        if vnfState == VNF_STATE_ERROR :
            tcResult.overallStatus = vnfState
		    logger.write_error("Test case 33 - Execution completed with errors - Unable to validate VNF state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("Test case 33 - Timeout - VNF transition into "Inactive" state failed")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    tcResult.resourceList.InitialVNFD = VNFM.VNFD.GetvResourceList(SwImageID, INITIAL)

    3. Start the normal traffic load
    logger.write_info("Starting the normal traffic load")

    if (status = traffic.ConfigTrafficLoad( NORMAL_TRAFFIC, trafficConfigParameter )) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to set traffic config parameters")
        logger.close_handlers()
        return ERROR

    if (status = traffic.StartTraffic()) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to start traffic")
        logger.close_handlers()
        return ERROR

    4. Validate no traffic goes through
    logger.write_info("Validating that no traffic goes through")

    if (status = traffic.DoesTrafficFlow()) <> FALSE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Traffic flow detected")
        logger.close_handlers()
        return ERROR

    5. Start the VNF (--> time stamp)
    logger.write_info("Starting VNF")

    tcResult.timeRecord.startVNFStart = time.clock()
    status = VNFM.VNF.Start(vnfRecord)
    if  status <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to start VNF")
        logger.close_handlers()
        return ERROR

    6. Validate VNF state is Active
    logger.write_info("Validating VNF state is 'Active'")

    wait_time = MAX_VNF_ACTIVATE_TIME
    while ( vnfState = VNFM.VNF.GetVNFState(vnfRecord) ) <> VNF_STATE_ACTIVE :
        if vnfState == VNF_STATE_ERROR :
            VNFM.VNF.Terminate(vnfRecord)
            tcResult.overallStatus = vnfState
            logger.write_error("Test case 33 - Execution completed with errors - Unable to validate VNF state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("Test case 33 - Timeout - VNF transition into "Active" state failed")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    7.	Validate the provided functionality and calculate the time for the activation (first time stamp arrival and no dropped packets)
    logger.write_info("Validating the provided functionality and calculating the time for the activation")

    if (status = traffic.DoesTrafficFlow()) <> TRUE :
	    VNFM.VNF.Terminate(vnfRecord)
	    tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Traffic flow not detected")
        logger.close_handlers()
	    return ERROR

    if (status = traffic.AnyTrafficLoss()) == TRUE :
	    VNFM.VNF.Terminate(vnfRecord)
	    tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Traffic lost")
        logger.close_handlers()
	    return ERROR

    tcResult.timeRecord.trafficActivationTime = Traffic.CalculateActivationTime()

    8.	Validate no scaling had occurred
    logger.write_info("Validating that no scaling had occured")

    if (status = VNFM.VNF.ValidateAllocatedvResources( vnfRecord, SwImageID, INITIAL_VRESOURCE_LEVEL )) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Scalling process had been performed")
        logger.close_handlers()
        return ERROR

    9.	Stop VNF
    logger.write_info("Stopping VNF")

    tcResult.timeRecord.stopVNFStart = time.clock()
    status = VNFM.VNF.Stop(vnfRecord)
    if  status <> SUCCESS :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to stop VNF")
        logger.close_handlers()
        return ERROR

    10.	Ensure that no traffic flows once stop is completed
    logger.write_info("Ensuring that no traffic flows once stopping process is completed")

    if (status = traffic.DoesTrafficFlow()) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Traffic is still running")
        logger.close_handlers()
        return ERROR

    11.	Stop Traffic Load
    logger.write_info("Stopping the traffic")

    if (status = traffic.Stop()) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to stop traffic")
        logger.close_handlers()
        return ERROR

    12.	Terminate VNF
    logger.write_info("Terminating VNF")

    status = VNFM.VNF.Terminate(vnfRecord)
    if  status <> SUCCESS :
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to terminate VNF")
        logger.close_handlers()
        return ERROR

    if ( status = VNFRECORD.delete(vnfRecord) ) <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("Test case 33 - Execution completed with errors - Unable to delete vnfRecord")
        logger.close_handlers()
        return ERROR

    logger.write_info("Test case 33 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus