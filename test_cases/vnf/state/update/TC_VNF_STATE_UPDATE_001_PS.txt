TC_VNF_STATE_UPDATE_001 VNF upgrade, update or rollback in state Instantiated

Sequence:
1. Instantiate VNF
2. Validate VNF is in state "Instantiated – Not configured"
3. Start the traffic load
4. Validate no traffic goes through
5. Initiate the upgrade, update or rollback process
6. Validate VNF new version is in place and state is "Instantiated – Not configured"
7. Validate no traffic has been forwarded
8. Stop Traffic
9. Terminate VNF
10. Validate that all vResources have been released

Pseudo Code:

Input
# All required input information are stored in the test case input variable tcInput and includes following information:
    SwImageID
    NewSwImageID
    Traffic Configuration Parameter -> trafficConfigParameter
    Process type --> processType
        - upgrade
        - update
        - rollback

# Test Results are stored in the test case result variable tcResult

import logging_module
import VNFRECORD
import VNFM.VNF
import Traffic

# instantiate logger
logger = logging_module.LoggingClass(__name__, "TC_VNF_STATE_UPDATE_001.txt")

def TC_VNF_STATE_UPDATE_001(tcInput):

    logger.write_info("Starting TC_VNF_STATE_UPDATE_001")

    vnfrecord = VNFRECORD.Create(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)
    traffic = Traffic.TrafficClass(logger)

    tcResult.overallStatus = SUCCESS

    1.  Instantiate VNF
    logger.write_info("Instantiating VNF")

    status = vnfm_vnf.Instantiate( vnfRecord, tcInput.SwImageID )
    if status <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at instantiating the VNF")
        logger.close_handlers()
        return ERROR

    2. Validate VNF is in state "Instantiated – Not configured"
    logger.write_info("Validating VNF is in state 'Not-Configured'")

    #allow the VNF to get into the instantiated-not-configured state
    wait_time = MAX_VNF_INSTANTIATION_TIME
    while ( vnfState = vnfm_vnf.GetVNFState( vnfRecord ) ) <> VNF_STATE_NOT_CONFIGURED :
        if vnfState == VNF_STATE_ERROR :
            tcResult.overallStatus = vnfState
            logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at validating the VNF is in 'Not-Configured' state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at waiting for the VNF ot be in 'Not-Configured' state")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    3. Start the traffic load
    logger.write_info("Starting traffic load")

    if (status = traffic.ConfigTrafficLoad( NORMAL_TRAFFIC_LOAD, tcInput.trafficConfigParameter )) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at configuring normal traffic load")
        logger.close_handlers()
        return ERROR

    if (status = traffic.StartTraffic()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at starting traffic")
        logger.close_handlers()
        return ERROR

    4. Validate no traffic goes through
    logger.write_info("Validating no traffic goes through")

    if (status = traffic.DoesTrafficFlow()) <> FALSE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at validating no traffic flows")
        logger.close_handlers()
        return ERROR

    5. Initiate the upgrade, update or rollback process
    logger.write_info("Initiating the tcInput.processType process")

    if tcInput.processType == "upgrade":
        status = vnfm_vnf.Upgrade( vnfRecord, tcInput.NewSwImageID )
    if tcInput.processType == "update" :
        status = vnfm_vnf.Update( vnfRecord, tcInput.NewSwImageID )
    if tcInput.processType == "rollback" :
        status = vnfm_vnf.Rollback( vnfRecord, tcInput.NewSwImageID )

    6. Validate VNF new version is in place and state is "Instantiated – Not configured"
    logger.write_info("Validating new VNF version is in place and state is 'Not-Configured'")

    if status <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at validating the new VNF version is in place")
        logger.close_handlers()
        return ERROR

    if ( vnfState = vnfm_vnf.GetVNFState( vnfRecord )) <> VNF_STATE_NOT_CONFIGURED :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at validating the new VNF version is in 'Not-Configured' state")
        logger.close_handlers()
        return ERROR

    7. Validate no traffic has been forwarded
    logger.write_info("Validating no traffic has been forwarded")

    if (status = traffic.DoesTrafficFlow()) <> FALSE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at validating no traffic flows")
        logger.close_handlers()
        return ERROR

    8. Stop Traffic
    logger.write_info("Stopping Traffic")

    if (status = traffic.Stop()) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at stopping traffic")
        logger.close_handlers()
        return ERROR

    9. Terminate VNF
    logger.write_info("Terminating VNF")

    vnfm_vnf.Terminate( vnfRecord )

    10. Validate that all vResources have been released
    logger.write_info("Validating that all vResources have been released")

    if (status = vnfm_vnf.AllvResourcesReleased( vnfRecord )) <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_UPDATE_001 execution completed with failure at validating the allocated vResources have been released")
        logger.close_handlers()
        return ERROR

    vnfrecord.Delete()

    logger.write_info("TC_VNF_STATE_UPDATE_001 execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus
