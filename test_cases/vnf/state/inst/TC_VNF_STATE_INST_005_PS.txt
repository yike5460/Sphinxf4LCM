TC_VNF_STATE_INST_005 VNF Instantiation with inactive Element Management without traffic

Sequence:
1. Deactivate EM if needed
2. Instantiate VNF
3. Validate the right vResources have been allocated
4. Validate VNFM reports the state "Instantiated-Not-Configured"
5. Terminate VNF

Pseudo Code:

Input
# All required input information are stored in the test case input variable tcInput and includes following information:
    SwImageID

# Test Results are stored in the test case result variable tcResult

import logging_module
import VNFRECORD
import ElementManagement
import VNFM.VNF

# instantiate logger
logger = logging_module.LoggingClass(__name__, "TC_VNF_STATE_INST_005.txt")

def TC_VNF_STATE_INST_005(tcInput):

    logger.write_info("Starting TC_VNF_STATE_INST_005")

    vnfrecord = VNFRECORD.VNFRECORDClass(logger)
    em = ElementManagement.EMClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    tcResult.overallStatus = SUCCESS

    vnfRecord = vnfrecord.Create()

    1. Deactivate EM if needed
    logger.write_info("Deactivating EM")

    if ( status = em.StopEM( vnfRecord ) ) <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_INST_005 execution completed with failure at stopping the EM")
        logger.close_handlers()
        return ERROR

    2. Instantiate VNF
    logger.write_info("Instantiating VNF")

    status = vnfm_vnf.Instantiate( vnfRecord, tcInput.SwImageID )
    if status <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_INST_005 execution completed with failure at instantiating the VNF")
        logger.close_handlers()
        return ERROR

    3. Validate the right vResources have been allocated
    logger.write_info("Validating the right vResources have been allocated")

    if (status = vnfm_vnf.ValidateAllocatedvResources( vnfRecord, tcInput.SwImageID, INITIAL_VRESOURCE_LEVEL )) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_INST_005 execution completed with failure at validating the allocated vResources")
        logger.close_handlers()
        return ERROR

    4. Validate VNFM reports the state "Instantiated-Not-Configured"
    logger.write_info("Validating VNFM reports the state 'Instantiated-Not-Configured'")

    #allow the VNF to get into the instantiated-not-configured state
    wait_time = MAX_VNF_INSTANTIATION_TIME
    while ( vnfState = vnfm_vnf.GetVNFState( vnfRecord ) ) <> VNF_STATE_NOT_CONFIGURED :
        if vnfState == VNF_STATE_ERROR :
            tcResult.overallStatus = vnfState
            logger.write_error("TC_VNF_STATE_INST_005 execution completed with failure at validating the VNF is in 'Not-Configured' state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("TC_VNF_STATE_INST_005 execution completed with failure at waiting for the VNF to be in 'Not-Configured' state")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    5. Terminate VNF
    logger.write_info("Terminating VNF")

    vnfm_vnf.Terminate( vnfRecord )

    vnfrecord.Delete()

    logger.write_info("TC_VNF_STATE_INST_005 execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus
