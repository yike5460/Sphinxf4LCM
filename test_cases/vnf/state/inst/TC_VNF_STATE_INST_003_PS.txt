TC_VNF_STATE_INST_003 VNF Instantiation including active Element Management without traffic

Sequence:
1. Start the EM or ensure EM is up and can configure the VNF
2. Instantiate the VNF without load (--> time stamp)
3. Validate VNFM reports the state "Inactive" after EM completed configuration (--> time stamp when reach the state)
4. Validate the right vResources have been allocated
5. Terminate VNF
6. Calculate the instantiation time

Pseudo Code:

Input
# All required input information are stored in the test case input variable tcInput and includes following information:
    SwImageID
    EM Config File Link -> emConfigFile

# Test Results are stored in the test case result variable tcResult

import logging_module
import VNFRECORD
import ElementManagement
import VNFM.VNF

# instantiate logger
logger = logging_module.LoggingClass(__name__, "TC_VNF_STATE_INST_003.txt")

def TC_VNF_STATE_INST_003(tcInput):

    logger.write_info("Starting TC_VNF_STATE_INST_003")

    vnfrecord = VNFRECORD.VNFRECORDClass(logger)
    em = ElementManagement.EMClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    tcResult.overallStatus = SUCCESS

    vnfRecord = vnfrecord.Create()

    1. Start the EM or ensure EM is up and can configure the VNF
    logger.write_info("Starting the EM")

    # Instantiate Element Management
    # Set the required EM configuration so that VNF can be configured by EM
    if ( status = em.SetEMConfiguration( vnfRecord, tcInput.emConfigFile )) <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_INST_003 execution completed with failure at setting the EM config file")
        logger.close_handlers()
        return ERROR
    # Start the EM so that it can service the VNF
    if ( status = em.StartEM( vnfRecord ) ) <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_INST_003 execution completed with failure at starting the EM")
        logger.close_handlers()
        return ERROR

    2. Instantiate the VNF without load (--> time stamp)
    logger.write_info("Instantiating the VNF")

    tcResult.timeRecord.instantiationStart = time.clock()
    status = vnfm_vnf.Instantiate( vnfRecord, tcInput.SwImageID )
    if status <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_INST_003 execution completed with failure at instantiating the VNF")
        logger.close_handlers()
        return ERROR

    3. Validate VNFM reports the state "Inactive" after EM completed configuration (--> time stamp when reach the state)
    logger.write_info("Validating VNFM reports the state 'Inactive'")

    #allow the VNF to get into the inactive state
    wait_time = MAX_VNF_INSTANTIATION_TIME
    while ( vnfState = vnfm_vnf.GetVNFState( vnfRecord ) ) <> VNF_STATE_INACTIVE :
        if vnfState == VNF_STATE_ERROR :
            tcResult.overallStatus = vnfState
            logger.write_error("TC_VNF_STATE_INST_003 execution completed with failure at validating the VNF is in 'Inactive' state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("TC_VNF_STATE_INST_003 execution completed with failure at waiting for the VNF to be in 'Inactive' state")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    tcResult.timeRecord.instantiationEnd = time.clock()

    4. Validate the right vResources have been allocated
    logger.write_info("Validating the right vResources have been allocated")

    if (status = vnfm_vnf.ValidateAllocatedvResources( vnfRecord, tcInput.SwImageID, INITIAL_VRESOURCE_LEVEL )) <> TRUE :
        vnfm_vnf.Terminate( vnfRecord )
        tcResult.overallStatus = status
        logger.write_error("TC_VNF_STATE_INST_003 execution completed with failure at validating allocated vResources")
        logger.close_handlers()
        return ERROR

    5. Terminate VNF
    logger.write_info("Terminating VNF")

    vnfm_vnf.Terminate( vnfRecord )

    6. Calculate the instantiation time
    logger.write_info("Calculating the instantiation time")

    tcResult.timeRecord.instantiationTime = tcResult.timeRecord.instantiationEnd - tcResult.timeRecord.instantiationStart

    vnfrecord.Delete()

    logger.write_info("TC_VNF_STATE_INST_003 execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus
