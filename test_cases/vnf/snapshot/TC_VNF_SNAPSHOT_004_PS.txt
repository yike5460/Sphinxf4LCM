TC.51	Storage Snapshot Creation and Deletion

Sequence:
1.	Instantiate VNF
2.	Validate VNF is in state Inactive
3.	Start the VNF
4.	Validate VNF is in state Active
5.	Start the min traffic load
6.	Validate traffic goes through (--> no dropped packets)
7.	Stop traffic
8.	Initiate the storage snapshot creation via the VNFM interface
9.	Validate VNF instructed NFVI to create a storage snapshot and a new image is found via the NFVI interface
10.	Terminate VNF
11.	Issue command to VNFM to display the newly created VNF storage snapshot
12.	Issue command deletion of storage snapshot to the VNFM
13.	Validate the storage snapshot has been deleted via VNFM and NFVI interface

Pseudo Code:

Input:
# All required input information are stored in the test case input variable tcInput and includes following information:
	SwImageID
	EM Config File Link -> emConfigFile
	VNF Config File Link -> vnfConfigFile
	VNF License File Link -> vnfLicenseFile
	Traffic Configuration Parameter  trafficConfigParameter

# Test Results are stored in the test case result variable tcResult

Comment: To make the pseudo code simpler to read, in a Python implementation the following code
	tcResult.overallStatus = status
	tcInput.emConfigFile
should be translated to dictionaries
	tcResult[ ‘overallStatus’ ] = status
	tcInput[ ‘emConfigFile’ ]

import logging_module
import VNFRECORD
import VNF
import VNFM.VNF
import VNFM.Snapshot
import traffic

# instantiate logger
logger = logging_module.LoggingClass(__name__, "test_case_51.txt")

def test_case_51():

    logger.write_info("Starting test case 51")

    vnf = VNF.VNFClass(logger)
    vnfm_vnf = VNFM.VNF.VNFM_VNFClass(logger)

    1. Instantiate VNF
    logger.write_info("Instantiating the VNF")

    tcResult.overallStatus = SUCCESS

    # Create the VNFRECORD object
    vnfRecord = VNFRECORD.Create()
    if vnfRecord == FALSE :
        tcResult.overallStatus = vnfRecord
        logger.write_error("Test case 51 - Execution completed with errors - Unable to create vnfRecord")
        logger.close_handlers()
        return ERROR

    # Check Element Manager or configuration file
    if EM_VNF_SYSTEM == TRUE :
        # Instantiate ElementManagement
        # Set the required EM configuration so that VNF can be configured by EM
        if ( status = ElementManagement.SetEMConfiguration(vnfRecord, tcInput.emConfigFile)) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("Test case 51 - Execution completed with errors - Unable to set EM config file")
            logger.close_handlers()
            return ERROR
        # Start the EM so that it can service the VNF
        if ( status = ElementManagement.StartEM(vnfRecord) ) <> TRUE :
            tcResult.overallStatus = status
			logger.write_error("Test case 51 - Execution completed with errors - Unable to start EM")
            logger.close_handlers()
            return ERROR
    else:
        # No Element Manager required, set VNF config and license
        if ( status = VNF.SetVNFConfigFile(vnfRecord, tcInput.vnfConfigFile) ) <> TRUE :
            tcResult.overallStatus = status
            logger.write_error("Test case 51 - Execution completed with errors - Unable to set VNF config file")
            logger.close_handlers()
            return ERROR

    if ( status = VNF.SetVNFLicense(vnfRecord, tcInput.vnfLicenseFile) ) <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to set VNF License file")
        logger.close_handlers()
        return ERROR

    if ( status = VNFM.VNF.Instantiate(vnfRecord, tcInput.SwImageID) ) <> TRUE
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to instantiate VNF")
        logger.close_handlers()
        return ERROR

    2. Validate VNF state is Inactive
    logger.write_info("Validating VNF state is 'Inactive'")

    #allow the VNF to get into the inactive state
    wait_time = MAX_VNF_INSTATIATION_TIME
    while ( vnfState = VNFM.VNF.GetVNFState(vnfRecord) ) <> VNF_STATE_INACTIVE :
        if vnfState == VNF_STATE_ERROR :
            tcResult.overallStatus = vnfState
            logger.write_error("Test case 51 - Execution completed with errors - Unable to validate VNF state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("Test case 51 - Timeout - VNF transition into "Inactive" state failed")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    tcResult.resourceList.InitialVNFD = VNFM.VNFD.GetvResourceList(SwImageID, INITIAL)

    3. Start the VNF
    logger.write_info("Starting VNF")

    status = VNFM.VNF.Start(vnfRecord)
    if  status <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to start VNF")
        logger.close_handlers()
        return ERROR

    4. Validate VNF state is Active
    logger.write_info("Validating VNF state is 'Active'")

    wait_time = MAX_VNF_ACTIVATE_TIME
    while ( vnfState = VNFM.VNF.GetVNFState(vnfRecord) ) <> VNF_STATE_ACTIVE :
        if vnfState == VNF_STATE_ERROR :
            VNFM.VNF.Terminate(vnfRecord)
            tcResult.overallStatus = vnfState
            logger.write_error("Test case 51 - Execution completed with errors - Unable to validate VNF state")
            logger.close_handlers()
            return ERROR
        if wait_time-- == 0 :
            tcResult.overallStatus = VNF_STATE_ERROR
            logger.write_error("Test case 51 - Timeout - VNF transition into "Active" state failed")
            logger.close_handlers()
            return ERROR
        time.sleep( 1 sec )

    5. Start the min traffic load
    logger.write_info("Starting the min traffic load")

    if (status = traffic.ConfigTrafficLoad(LOW_TRAFFIC_LOAD, trafficConfigParameter)) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to set traffic config parameters")
        logger.close_handlers()
        return ERROR

    if (status = traffic.StartTraffic()) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to start traffic")
        logger.close_handlers()
        return ERROR

    6.	Validate traffic goes through (--> no dropped packets)
    logger.write_info("Validating traffic goes through (--> no dropped packets)")

    if (status = traffic.DoesTrafficFlow()) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Traffic flow not detected")
        logger.close_handlers()
        return ERROR

    if (status = traffic.AnyTrafficLoss()) == TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Traffic lost")
        logger.close_handlers()
        return ERROR

    7.	Stop traffic
    logger.write_info("Stopping the traffic")

    if (status = traffic.Stop()) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to stop traffic")
        logger.close_handlers()
        return ERROR

    8.	Initiate the storage snapshot creation via the VNFM interface
    logger.write_info("Initiating the storage snapshot creation via the VNFM interface")

    vnfSnapshotID = VNFM.Snapshot.CreateStorageImage(vnfRecord)

    if StorageImageID == FALSE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = StorageImageID
        logger.write_error("Test case 51 - Execution completed with errors - Unable to create the storage snapshot")
        logger.close_handlers()
        return ERROR

    9.	Validate VNF instructed NFVI to create a storage snapshot and a new image is found via the NFVI interface
    logger.write_info("Validating that a new image is found via the NFVI interface")

    tcResult.VIM.storageImageInformationList = VIM.Snapshot.GetStorageImageList(vnfSnapshotID)
    if not tcResult.VIM.storageImageInformationList :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = FAILED
        logger.write_error("Test case 51 - Execution completed with errors - Storage snapshot not found in VIM")
        logger.close_handlers()
        return ERROR

    10. Terminate VNF
    logger.write_info("Terminating VNF")

    status = VNFM.VNF.Terminate(vnfRecord)
    if  status <> SUCCESS :
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to terminate VNF")
        logger.close_handlers()
        return ERROR

    11.	Issue command to VNFM to display the newly created VNF storage snapshot
    logger.write_info("Displaying the newly created VNF storage snapshot - use VNFM interface")

    tcResult.VNFM.storageImageInformationList = VNFM.Snapshot.GetStorageImageList(vnfSnapshotID)

    if tcResult.VIM.storageImageInformationList <> tcResult.VNFM.storageImageInformationList
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Different storage image parameters")
        logger.close_handlers()
        return ERROR

    12.	Issue command deletion of storage snapshot to the VNFM
    logger.write_info("Deleting the storage snapshot - use VNFM interface")

    if (status = VNFM.Snapshot.DeleteStorageImage(vnfSnapshotID)) <> TRUE :
        VNFM.VNF.Terminate(vnfRecord)
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to delete storage snapshot")
        logger.close_handlers()
        return ERROR

    13.	Validate the storage snapshot has been deleted via VNFM and NFVI interface
    logger.write_info("Validating that storage snapshot was deleted - use both VNFM and NFVI interfaces")

    status = VNFM.Snapshot.GetStorageImageList(vnfSnapshotID)) and VIM.Snapshot.GetStorageImageList(vnfSnapshotID))
    if status <> FALSE :
        tcResult.overallStatus = ERROR_SNAPSHOT_FOUND
        logger.write_error("Test case 51 - Execution completed with errors - Compute image found")
        logger.close_handlers()
        return ERROR

    if ( status = VNFRECORD.delete(vnfRecord) ) <> TRUE :
        tcResult.overallStatus = status
        logger.write_error("Test case 51 - Execution completed with errors - Unable to delete vnfRecord")
        logger.close_handlers()
        return ERROR

    logger.write_info("Test case 51 - Execution completed successfully")

    logger.close_handlers()

    return tcResult.overallStatus